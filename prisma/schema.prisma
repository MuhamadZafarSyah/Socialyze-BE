// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}


// INI SAMA AJA KAYAK 
// di table post kan mau relasi ke user dan

// PADA TABLE POST
// unsignBigInteger("authorid")
// foreign("authorid")->referance("id")->on("user")->cascadeondelete()

// PADA TABLE USER HARUS MENERIMA RELASI DENGAN TAMBAHIN NAMA TABLENYA
// posts Post[], -> artinya onToMany, kalo many harus pake array
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  profile   Profile?
}

model Profile {
  id             String    @id @default(uuid())
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String
  username       String    @unique
  bio            String?
  link           String?
  gender         Gender
  avatar         String?
  category       String?
  following      Follow[]  @relation("ProfileFollowing")
  followers      Follow[]  @relation("ProfileFollowers")
  posts          Post[]
  comments       Comment[]
  likes          Like[]
  snaps          Snap[]
  savedPosts     SavedPost[]
  createdAt      DateTime  @default(now())
}

model Follow {
  id                 String   @id @default(uuid())
  followingProfileId String
  followedProfileId  String
  createdAt          DateTime @default(now())

  followingProfile Profile @relation("ProfileFollowing", fields: [followingProfileId], references: [id], onDelete: Cascade)
  followedProfile  Profile @relation("ProfileFollowers", fields: [followedProfileId], references: [id], onDelete: Cascade)
}

model Post {
  id          String   @id @default(uuid())
  profileId   String
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  caption     String?
  postImage   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  comments    Comment[]
  likes       Like[]
  savedPosts  SavedPost[]
}

model Comment {
  id        String   @id @default(uuid())
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  profileId String
  postId    String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Snap {
  id        String   @id @default(uuid())
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  snapImage String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model SavedPost {
  id        String   @id @default(uuid())
  profileId String
  postId    String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
